
> booking-now@0.1.0 dev
> next dev --turbopack

   ▲ Next.js 15.4.2 (Turbopack)
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.175:3000
   - Environments: .env.local, .env

 ✓ Starting...
 ✓ Compiled middleware in 228ms
 ✓ Ready in 1984ms
 ○ Compiling /api/health ...
 ✓ Compiled /api/health in 986ms
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."services"."id" FROM "public"."services" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."bookings"."id" FROM "public"."bookings" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."tenants"."id" FROM "public"."tenants" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/health 200 in 2476ms
 ✓ Compiled /api/admin/tenants in 268ms
NextAuth Warning: DEBUG_ENABLED
 GET /api/admin/tenants 403 in 380ms
 ✓ Compiled /api/widget/bookings in 330ms
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Error sending email: {
  statusCode: 403,
  error: 'You can only send testing emails to your own email address (info@datapro.cl). To send emails to other recipients, please verify a domain at resend.com/domains, and change the `from` address to an email using this domain.'
}
Email service error: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:79:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  77 |     if (error) {
  78 |       console.error('Error sending email:', error);
> 79 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  80 |     }
  81 |
  82 |     return { success: true, data };
Error sending email confirmation: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:79:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  77 |     if (error) {
  78 |       console.error('Error sending email:', error);
> 79 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  80 |     }
  81 |
  82 |     return { success: true, data };
 POST /api/widget/bookings 201 in 3349ms
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."users" ("id","email","name","phone","role","tenantId","createdAt","updatedAt") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."UserRole"),$6,$7,$8) RETURNING "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Error sending tenant notification email: {
  statusCode: 403,
  error: 'You can only send testing emails to your own email address (info@datapro.cl). To send emails to other recipients, please verify a domain at resend.com/domains, and change the `from` address to an email using this domain.'
}
Tenant email service error: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
    at async POST (src\app\api\widget\bookings\route.ts:217:8)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
Error sending email confirmation: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
    at async POST (src\app\api\widget\bookings\route.ts:217:8)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
 POST /api/widget/bookings 201 in 2522ms
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Error sending email: {
  statusCode: 403,
  error: 'The datapro.cl domain is not verified. Please, add and verify your domain on https://resend.com/domains',
  name: 'validation_error'
}
Email service error: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:79:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  77 |     if (error) {
  78 |       console.error('Error sending email:', error);
> 79 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  80 |     }
  81 |
  82 |     return { success: true, data };
Error sending email confirmation: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:79:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  77 |     if (error) {
  78 |       console.error('Error sending email:', error);
> 79 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  80 |     }
  81 |
  82 |     return { success: true, data };
 POST /api/widget/bookings 201 in 1825ms
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Error sending tenant notification email: {
  statusCode: 403,
  error: 'You can only send testing emails to your own email address (info@datapro.cl). To send emails to other recipients, please verify a domain at resend.com/domains, and change the `from` address to an email using this domain.'
}
Tenant email service error: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
    at async POST (src\app\api\widget\bookings\route.ts:217:8)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
Error sending email confirmation: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
    at async POST (src\app\api\widget\bookings\route.ts:217:8)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
 POST /api/widget/bookings 201 in 1947ms
 ✓ Compiled /api/test-email in 144ms
🧪 Testing email with booking data: {
  id: 'test-123',
  clientEmail: 'info@datapro.cl',
  serviceName: 'Photography Session'
}
Email service error: TypeError: booking.date.toLocaleDateString is not a function
    at sendBookingConfirmationEmail (src\lib\email.ts:54:32)
    at POST (src\app\api\test-email\route.ts:21:54)
  52 |         - Servicio: ${booking.service.name}
  53 |         - Profesional: ${booking.professional.name}
> 54 |         - Fecha: ${booking.date.toLocaleDateString('es-CO')}
     |                                ^
  55 |         - Hora: ${booking.startTime} - ${booking.endTime}
  56 |         - Duración: ${booking.service.duration} minutos
  57 |         - Precio: $${booking.service.price.toLocaleString('es-CO')}
Test email error: TypeError: booking.date.toLocaleDateString is not a function
    at sendBookingConfirmationEmail (src\lib\email.ts:54:32)
    at POST (src\app\api\test-email\route.ts:21:54)
  52 |         - Servicio: ${booking.service.name}
  53 |         - Profesional: ${booking.professional.name}
> 54 |         - Fecha: ${booking.date.toLocaleDateString('es-CO')}
     |                                ^
  55 |         - Hora: ${booking.startTime} - ${booking.endTime}
  56 |         - Duración: ${booking.service.duration} minutos
  57 |         - Precio: $${booking.service.price.toLocaleString('es-CO')}
 POST /api/test-email 500 in 356ms
🧪 Testing email with booking data: {
  id: 'test-123',
  clientEmail: 'info@datapro.cl',
  serviceName: 'Photography Session',
  date: 2025-08-12T10:00:00.000Z
}
 POST /api/test-email 200 in 932ms
prisma:error Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "Se ha forzado la interrupción de una conexión existente por el host remoto." }) }
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."tenants"."id" FROM "public"."tenants" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."services"."id" FROM "public"."services" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."bookings"."id" FROM "public"."bookings" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/health 200 in 2228ms
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Error sending tenant notification email: {
  statusCode: 403,
  error: 'You can only send testing emails to your own email address (info@datapro.cl). To send emails to other recipients, please verify a domain at resend.com/domains, and change the `from` address to an email using this domain.'
}
Tenant email service error: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
    at async POST (src\app\api\widget\bookings\route.ts:217:8)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
Error sending email confirmation: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
    at async POST (src\app\api\widget\bookings\route.ts:217:8)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
 POST /api/widget/bookings 201 in 4226ms
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
 POST /api/widget/bookings 201 in 1503ms
Error sending tenant notification email: {
  statusCode: 403,
  error: 'You can only send testing emails to your own email address (info@datapro.cl). To send emails to other recipients, please verify a domain at resend.com/domains, and change the `from` address to an email using this domain.'
}
Tenant email service error: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
Error sending tenant notification (non-blocking): Failed to send tenant notification: undefined
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
Error sending email: {
  statusCode: 403,
  error: 'You can only send testing emails to your own email address (info@datapro.cl). To send emails to other recipients, please verify a domain at resend.com/domains, and change the `from` address to an email using this domain.'
}
Email service error: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:79:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  77 |     if (error) {
  78 |       console.error('Error sending email:', error);
> 79 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  80 |     }
  81 |
  82 |     return { success: true, data };
Error sending email confirmation: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:79:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  77 |     if (error) {
  78 |       console.error('Error sending email:', error);
> 79 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  80 |     }
  81 |
  82 |     return { success: true, data };
 POST /api/widget/bookings 201 in 3023ms
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."users" ("id","email","name","phone","role","tenantId","createdAt","updatedAt") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."UserRole"),$6,$7,$8) RETURNING "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
 POST /api/widget/bookings 201 in 1511ms
Error sending tenant notification email: {
  statusCode: 403,
  error: 'You can only send testing emails to your own email address (info@datapro.cl). To send emails to other recipients, please verify a domain at resend.com/domains, and change the `from` address to an email using this domain.'
}
Tenant email service error: Error: Failed to send tenant notification: undefined
    at sendBookingNotificationToTenant (src\lib\email.ts:160:12)
  158 |     if (error) {
  159 |       console.error('Error sending tenant notification email:', error);
> 160 |       throw new Error(`Failed to send tenant notification: ${error.message}`);
      |            ^
  161 |     }
  162 |
  163 |     return { success: true, data };
Error sending tenant notification (non-blocking): Failed to send tenant notification: undefined
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
⚠️  DESARROLLO: Email sebaprogramer@gmail.com no se puede enviar sin dominio verificado.
⚠️  Para testing usa: info@datapro.cl o delivered@resend.dev
⚠️  En producción: verifica un dominio en resend.com/domains
⚠️  DESARROLLO: Email de tenant demo@bookingnowtenant.com no se puede enviar sin dominio verificado.
 POST /api/widget/bookings 201 in 1066ms
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
⚠️  DESARROLLO: Email de tenant demo@bookingnowtenant.com no se puede enviar sin dominio verificado.
 POST /api/widget/bookings 201 in 1578ms
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
📧 Enviando confirmación de reserva #cme0upuy9000pyjz46chmtqen a sebaprogramer@gmail.com
📧 Configuración de email: {
  from: 'BookingNow <info@datapro.cl>',
  to: [ 'info@datapro.cl' ],
  cc: [ 'sebaprogramer@gmail.com' ],
  subject: 'Confirmación de Reserva #cme0upuy9000pyjz46chmtqen - Photography Session'
}
❌ Error sending email: {
  statusCode: 403,
  error: 'The datapro.cl domain is not verified. Please, add and verify your domain on https://resend.com/domains',
  name: 'validation_error'
}
❌ Email service error: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:85:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  83 |     if (error) {
  84 |       console.error('❌ Error sending email:', error);
> 85 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  86 |     }
  87 |
  88 |     console.log(`✅ Email enviado exitosamente:`, {
Error sending email confirmation: Error: Failed to send email: undefined
    at sendBookingConfirmationEmail (src\lib\email.ts:85:12)
    at async POST (src\app\api\widget\bookings\route.ts:213:6)
  83 |     if (error) {
  84 |       console.error('❌ Error sending email:', error);
> 85 |       throw new Error(`Failed to send email: ${error.message}`);
     |            ^
  86 |     }
  87 |
  88 |     console.log(`✅ Email enviado exitosamente:`, {
🔧 INFORMACIÓN DE DESARROLLO:
Error creating booking for widget: ReferenceError: emailData is not defined
    at POST (src\app\api\widget\bookings\route.ts:227:35)
  225 |       if (process.env.NODE_ENV === 'development') {
  226 |         console.log("🔧 INFORMACIÓN DE DESARROLLO:");
> 227 |         console.log(`   Cliente: ${emailData.clientName} (${emailData.clientEmail})`);
      |                                   ^
  228 |         console.log(`   Reserva: #${booking.id}`);
  229 |         console.log("   Para recibir emails reales, verifica un dominio en resend.com");
  230 |       }
 POST /api/widget/bookings 500 in 2557ms
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
📧 Enviando confirmación de reserva #cme0uqw28000ryjz4po1mwp8e a sebaprogramer@gmail.com
📧 Configuración de email: {
  from: 'BookingNow <onboarding@resend.dev>',
  to: [ 'info@datapro.cl' ],
  cc: [ 'sebaprogramer@gmail.com' ],
  subject: 'Confirmación de Reserva #cme0uqw28000ryjz4po1mwp8e - Photography Session'
}
✅ Email enviado exitosamente: {
  emailId: 'b4c4fa81-71b2-4a28-ac1a-55ebb0ba7ebd',
  to: [ 'info@datapro.cl' ],
  cc: [ 'sebaprogramer@gmail.com' ]
}
📧 Enviando notificación de reserva #cme0uqw28000ryjz4po1mwp8e al tenant
📧 Configuración de email tenant: {
  from: 'BookingNow <onboarding@resend.dev>',
  to: [ 'info@datapro.cl' ],
  cc: [ 'demo@bookingnowtenant.com' ],
  subject: 'Nueva Reserva Recibida #cme0uqw28000ryjz4po1mwp8e - Photography Session'
}
 POST /api/widget/bookings 201 in 1725ms
✅ Email de tenant enviado exitosamente: {
  emailId: '19fa38f2-acc1-40bc-a7d7-2e1355cb7e30',
  to: [ 'info@datapro.cl' ],
  cc: [ 'demo@bookingnowtenant.com' ]
}
prisma:query SELECT 1
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."users" ("id","email","name","phone","role","tenantId","createdAt","updatedAt") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."UserRole"),$6,$7,$8) RETURNING "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."startDateTime" < $3 AND "public"."bookings"."endDateTime" > $4 AND "public"."bookings"."status" IN (CAST($5::text AS "public"."BookingStatus"),CAST($6::text AS "public"."BookingStatus"))) LIMIT $7 OFFSET $8
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE "public"."tenants"."id" IN ($1) OFFSET $2
prisma:query COMMIT
📧 Enviando confirmación de reserva #cme0uswu6000vyjz40jihsxaa a maria.rodriguez@empresa.com
📧 Configuración de email: {
  from: 'BookingNow <onboarding@resend.dev>',
  to: [ 'info@datapro.cl' ],
  cc: [ 'maria.rodriguez@empresa.com' ],
  subject: 'Confirmación de Reserva #cme0uswu6000vyjz40jihsxaa - Photography Session'
}
✅ Email enviado exitosamente: {
  emailId: '289dea47-1916-42a7-b447-b549598b0f1c',
  to: [ 'info@datapro.cl' ],
  cc: [ 'maria.rodriguez@empresa.com' ]
}
📧 Enviando notificación de reserva #cme0uswu6000vyjz40jihsxaa al tenant
📧 Configuración de email tenant: {
  from: 'BookingNow <onboarding@resend.dev>',
  to: [ 'info@datapro.cl' ],
  cc: [ 'demo@bookingnowtenant.com' ],
  subject: 'Nueva Reserva Recibida #cme0uswu6000vyjz40jihsxaa - Photography Session'
}
 POST /api/widget/bookings 201 in 1938ms
✅ Email de tenant enviado exitosamente: {
  emailId: '2f66bb02-bcb6-4b28-b783-b7d27481b771',
  to: [ 'info@datapro.cl' ],
  cc: [ 'demo@bookingnowtenant.com' ]
}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."tenants"."id" FROM "public"."tenants" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."services"."id" FROM "public"."services" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."bookings"."id" FROM "public"."bookings" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/health 200 in 1511ms
 ○ Compiling /api/widget/tenant/[tenantId]/bookings ...
 ✓ Compiled /api/widget/tenant/[tenantId]/bookings in 691ms
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2 AND "public"."services"."isActive" = $3) LIMIT $4 OFFSET $5
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."name", "public"."users"."phone", "public"."users"."role"::text, "public"."users"."tenantId", "public"."users"."createdAt", "public"."users"."updatedAt", "public"."users"."password" FROM "public"."users" WHERE ("public"."users"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE ("public"."bookings"."serviceId" = $1 AND "public"."bookings"."tenantId" = $2 AND "public"."bookings"."status" IN (CAST($3::text AS "public"."BookingStatus"),CAST($4::text AS "public"."BookingStatus")) AND (("public"."bookings"."startDateTime" >= $5 AND "public"."bookings"."startDateTime" < $6) OR ("public"."bookings"."endDateTime" > $7 AND "public"."bookings"."endDateTime" <= $8) OR ("public"."bookings"."startDateTime" <= $9 AND "public"."bookings"."endDateTime" >= $10))) LIMIT $11 OFFSET $12
prisma:query BEGIN
prisma:query INSERT INTO "public"."bookings" ("id","clientId","professionalId","serviceId","tenantId","startDateTime","endDateTime","status","totalPrice","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,CAST($8::text AS "public"."BookingStatus"),$9,$10,$11,$12) RETURNING "public"."bookings"."id"
prisma:query SELECT "public"."bookings"."id", "public"."bookings"."clientId", "public"."bookings"."professionalId", "public"."bookings"."serviceId", "public"."bookings"."tenantId", "public"."bookings"."startDateTime", "public"."bookings"."endDateTime", "public"."bookings"."status"::text, "public"."bookings"."totalPrice", "public"."bookings"."notes", "public"."bookings"."createdAt", "public"."bookings"."updatedAt" FROM "public"."bookings" WHERE "public"."bookings"."id" = $1 LIMIT $2 OFFSET $3
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."duration", "public"."services"."price" FROM "public"."services" WHERE "public"."services"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query COMMIT
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."phone" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
📧 [WIZARD] Enviando confirmación de reserva #cme0v2t2f000xyjz4jwsvb39y a sebaprogramer@gmail.com
📧 Enviando confirmación de reserva #cme0v2t2f000xyjz4jwsvb39y a sebaprogramer@gmail.com
📧 Configuración de email: {
  from: 'BookingNow <onboarding@resend.dev>',
  to: [ 'info@datapro.cl' ],
  cc: [ 'sebaprogramer@gmail.com' ],
  subject: 'Confirmación de Reserva #cme0v2t2f000xyjz4jwsvb39y - Photography Session'
}
✅ Email enviado exitosamente: {
  emailId: '91207142-49d9-4024-9093-5bf0a5920a99',
  to: [ 'info@datapro.cl' ],
  cc: [ 'sebaprogramer@gmail.com' ]
}
📧 Enviando notificación de reserva #cme0v2t2f000xyjz4jwsvb39y al tenant
📧 Configuración de email tenant: {
  from: 'BookingNow <onboarding@resend.dev>',
  to: [ 'info@datapro.cl' ],
  cc: [ 'demo@bookingnowtenant.com' ],
  subject: 'Nueva Reserva Recibida #cme0v2t2f000xyjz4jwsvb39y - Photography Session'
}
prisma:query INSERT INTO "public"."notifications" ("id","tenantId","bookingId","type","title","message","read","createdAt","updatedAt") VALUES ($1,$2,$3,CAST($4::text AS "public"."NotificationType"),$5,$6,$7,$8,$9) RETURNING "public"."notifications"."id", "public"."notifications"."tenantId", "public"."notifications"."bookingId", "public"."notifications"."type"::text, "public"."notifications"."title", "public"."notifications"."message", "public"."notifications"."read", "public"."notifications"."createdAt", "public"."notifications"."updatedAt"
 POST /api/widget/tenant/cmdp0o00r0001ugbkilxow92u/bookings 200 in 4014ms
✅ Email de tenant enviado exitosamente: {
  emailId: 'ab8c567b-ff8f-41ae-8e70-a01523041cf2',
  to: [ 'info@datapro.cl' ],
  cc: [ 'demo@bookingnowtenant.com' ]
}
prisma:query SELECT "public"."services"."id", "public"."services"."name", "public"."services"."description", "public"."services"."duration", "public"."services"."price", "public"."services"."tenantId", "public"."services"."isActive", "public"."services"."createdAt", "public"."services"."updatedAt" FROM "public"."services" WHERE ("public"."services"."id" = $1 AND "public"."services"."tenantId" = $2 AND "public"."services"."isActive" = $3) LIMIT $4 OFFSET $5
 POST /api/widget/tenant/cm5wc8yhu00007bkcfzpx4slk/bookings 404 in 1072ms
 ○ Compiling /_not-found/page ...
 ✓ Compiled /_not-found/page in 4.8s
 GET /api/widget/tenant/cm5wc8yhu00007bkcfzpx4slk/services 404 in 5606ms
 GET /api/widget/cm5wc8yhu00007bkcfzpx4slk/services 404 in 213ms
prisma:query SELECT "public"."tenants"."id", "public"."tenants"."name", "public"."tenants"."email", "public"."tenants"."password", "public"."tenants"."phone", "public"."tenants"."isActive", "public"."tenants"."createdAt", "public"."tenants"."updatedAt" FROM "public"."tenants" WHERE ("public"."tenants"."id" = $1 AND "public"."tenants"."isActive" = $2) LIMIT $3 OFFSET $4
 POST /api/widget/bookings 404 in 955ms

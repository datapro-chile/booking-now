generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Tenant {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  phone         String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  users         User[]
  services      Service[]
  professionals Professional[]
  bookings      Booking[]

  @@map("tenants")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  phone         String?
  role          UserRole      @default(CLIENT)
  tenantId      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  password      String?
  accounts      Account[]
  bookings      Booking[]
  professionals Professional?
  sessions      Session[]
  tenant        Tenant?       @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Professional {
  id                String                @id @default(cuid())
  userId            String                @unique
  tenantId          String
  bio               String?
  hourlyRate        Float?
  isAvailable       Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  availabilitySlots AvailabilitySlot[]
  bookings          Booking[]
  services          ProfessionalService[]
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant            Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("professionals")
}

model Service {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  duration             Int
  price                Float
  tenantId             String
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  bookings             Booking[]
  professionals        ProfessionalService[]
  availabilitySchedule ServiceAvailability[]
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("services")
}

model ServiceAvailability {
  id          String   @id @default(cuid())
  serviceId   String
  dayOfWeek   Int      // 0 = Domingo, 1 = Lunes, ..., 6 = SÃ¡bado
  startTime   String   // Formato "HH:MM" (ej: "09:00")
  endTime     String   // Formato "HH:MM" (ej: "17:00")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, dayOfWeek, startTime, endTime])
  @@map("service_availability")
}

model ProfessionalService {
  id             String       @id @default(cuid())
  professionalId String
  serviceId      String
  customPrice    Float?
  createdAt      DateTime     @default(now())
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, serviceId])
  @@map("professional_services")
}

model Booking {
  id             String        @id @default(cuid())
  clientId       String
  professionalId String?
  serviceId      String
  tenantId       String
  startDateTime  DateTime
  endDateTime    DateTime
  status         BookingStatus @default(PENDING)
  totalPrice     Float
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  service        Service       @relation(fields: [serviceId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
  client         User          @relation(fields: [clientId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model AvailabilitySlot {
  id             String       @id @default(cuid())
  professionalId String
  dayOfWeek      Int
  startTime      String
  endTime        String
  isAvailable    Boolean      @default(true)
  specificDate   DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("availability_slots")
}

enum UserRole {
  CLIENT
  PROFESSIONAL
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

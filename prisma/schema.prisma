// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings      Booking[]
  professionals Professional[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Professional {
  id          String @id @default(cuid())
  userId      String @unique
  bio         String?
  hourlyRate  Float?
  isAvailable Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  services            ProfessionalService[]
  bookings            Booking[]
  availabilitySlots   AvailabilitySlot[]

  @@map("professionals")
}

model Service {
  id          String @id @default(cuid())
  name        String
  description String?
  duration    Int    // Duration in minutes
  price       Float
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  professionals ProfessionalService[]
  bookings      Booking[]

  @@map("services")
}

model ProfessionalService {
  id             String @id @default(cuid())
  professionalId String
  serviceId      String
  customPrice    Float?
  createdAt      DateTime @default(now())

  // Relations
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([professionalId, serviceId])
  @@map("professional_services")
}

model Booking {
  id             String        @id @default(cuid())
  clientId       String
  professionalId String?
  serviceId      String
  startDateTime  DateTime
  endDateTime    DateTime
  status         BookingStatus @default(PENDING)
  totalPrice     Float
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  client       User          @relation(fields: [clientId], references: [id])
  professional Professional? @relation(fields: [professionalId], references: [id])
  service      Service       @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model AvailabilitySlot {
  id             String    @id @default(cuid())
  professionalId String
  dayOfWeek      Int       // 0 = Sunday, 1 = Monday, etc.
  startTime      String    // Format: "09:00"
  endTime        String    // Format: "17:00"
  isAvailable    Boolean   @default(true)
  specificDate   DateTime? // For specific date overrides
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("availability_slots")
}

enum UserRole {
  CLIENT
  PROFESSIONAL
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
